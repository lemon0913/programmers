# 73점.......뭐가 틀린건가...
# def solution(k, dungeons):
#     answer = 0

#     while dungeons:     
        
#         # result 배열에 각 던전을 방문할 때 마다 [인덱스, 남은 피로도, 방문할 수 있는 던전의 수]를 저장
#         result = []
#         for i in range(len(dungeons)):
#             a = k - dungeons[i][1]
#             b = 0
            
#             for j in range(len(dungeons)):
#                 if j == i:
#                     continue
#                 if a > dungeons[j][0]:
#                     b += 1
#             result.append((i,a,b))
        
#         # result를 남은 던전 수가 많은 순서대로, 남은 피로도가 높은 순서 대로 정렬
#         result.sort(key = lambda x:(-x[2], -x[1]))
        
#         # 만약 result안의 모든 경우의 남은 피로도가 음수일 경우 모험 끝내기
#         flag = False
#         for i in range(len(result)):
#             if result[i][1] >= 0:
#                 flag = True
#         if not flag:
#             break
        
#         # 남은 던전 수, 남은 피로도가 가장 높은 던전 방문하기
#         k = result[0][1]
#         del dungeons[result[0][0]]
#         answer += 1

#     return answer



# dfs 유형이란다...dfs 너무 어렵다!!!!!!!!!!
# visited를 1로 바꾸고 재귀를 실행하고 0으로 다시 초기화해주는 방법을 사용...
answer = 0
N = 0
visited = []


def dfs(k, cnt, dungeons):
    global answer
    if cnt > answer:
        answer = cnt

    for j in range(N):
        if k >= dungeons[j][0] and not visited[j]:
            visited[j] = 1
            dfs(k - dungeons[j][1], cnt + 1, dungeons)
            visited[j] = 0


def solution(k, dungeons):
    global N, visited
    N = len(dungeons)
    visited = [0] * N
    dfs(k, 0, dungeons)
    return answer