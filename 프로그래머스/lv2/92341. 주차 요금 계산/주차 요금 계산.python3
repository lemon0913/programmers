# 딕셔너리의 정렬이 기억이 안났다...
# 코테 전에 알고리즘 오답노트 만든거 반드기 보고 들어갈 것..!!
# 문제 자체는 어렵지 않았음.. 
# def solution(fees, records):
#     answer = []
    
#     records.reverse() #OUT을 기준으로 누적 추차 시간을 구할 것임..그러니 records 배열을 뒤집기

#     cars = {} # 차량 별 누적시간을 저장하는 딕셔너리
#     for re in records:
#         a, b, c = re.split(' ')
#         time = a.split(':')
        
#         if c == 'OUT':
#             if b not in cars: 
#                 cars[b] = int(time[0])*60+int(time[1]) 
#             else: 
#                 cars[b] += int(time[0])*60+int(time[1]) 
#         else:
#             if b not in cars: # 딕셔너리에 저장된 적 없는 차량이 들어온다 -> 23:59에 나갔다는 의미
#                 cars[b] = 23*60+59 - int(time[0])*60 - int(time[1])
#             else: # 딕셔너리에 저장된 적 있는 차량이면 out될 때와 in될 때의 차이를 구해서 cars에 더하기
#                 cars[b] -= (int(time[0])*60 + int(time[1]))
        
#     # 차량 번호가 작은 순서대로 누적 주차 시간 정렬   
#     cars = sorted(cars.items(), key = lambda x:x[0])
    
#     # 누적 시간에 따른 금액 구하기
#     for c in cars:
#         if c[1] <= fees[0]:
#             answer.append(fees[1])
#         else:
#             f = fees[1]
#             t = c[1] - fees[0]
#             if t % fees[2] != 0:
#                 f = f + (t//fees[2]+1)*fees[3]
#             else:
#                 f = f + t//fees[2]*fees[3]
#             answer.append(f)
    
    
#     return answer


# 다른건 아니고 math.ceil()을 사용해 올림 부분을 처리한 내용
import math
def solution(fees, records):
    answer = []
    
    records.reverse() #OUT을 기준으로 누적 추차 시간을 구할 것임..그러니 records 배열을 뒤집기

    cars = {} # 차량 별 누적시간을 저장하는 딕셔너리
    for re in records:
        a, b, c = re.split(' ')
        time = a.split(':')
        
        if c == 'OUT':
            if b not in cars: 
                cars[b] = int(time[0])*60+int(time[1]) 
            else: 
                cars[b] += int(time[0])*60+int(time[1]) 
        else:
            if b not in cars: # 딕셔너리에 저장된 적 없는 차량이 들어온다 -> 23:59에 나갔다는 의미
                cars[b] = 23*60+59 - int(time[0])*60 - int(time[1])
            else: # 딕셔너리에 저장된 적 있는 차량이면 out될 때와 in될 때의 차이를 구해서 cars에 더하기
                cars[b] -= (int(time[0])*60 + int(time[1]))
        
    # 차량 번호가 작은 순서대로 누적 주차 시간 정렬   
    cars = sorted(cars.items(), key = lambda x:x[0])
    
    # 누적 시간에 따른 금액 구하기
    for c in cars:
        if c[1] <= fees[0]:
            answer.append(fees[1])
        else:            
            t = c[1] - fees[0]
            f = fees[1] + math.ceil(t/fees[2])*fees[3]
            answer.append(f)
    
    
    return answer