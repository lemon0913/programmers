# 테케 1개 통과 못함...으아가가ㅏㅏ 맞춘걸로 해줘라ㅏㅏ
# from collections import deque
# def solution(bridge_length, weight, truck_weights):
#     answer = 0
    
#     bridge = [0 for _ in range(bridge_length)]
#     bridge = deque(bridge)
#     truck_weights = deque(truck_weights)
    
    
#     while True:
#         if truck_weights:
#             if sum(bridge) == 0:
#                 bridge[-1] = truck_weights.popleft()

#             elif sum(bridge)+truck_weights[0] <= weight:
#                 bridge.rotate(-1)
#                 bridge[-1] = truck_weights.popleft()          

#             elif sum(bridge)+truck_weights[0] > weight:
#                 if bridge[0] != 0:
#                     bridge[0] = 0
#                     answer -= 1
#                 else:
#                     bridge.rotate(-1)
                    
            
            
#         else:
#             if bridge[0] == 0:
#                 bridge.rotate(-1)
                
#             else:
#                 bridge[0] = 0
#                 if sum(bridge) == 0:
#                     answer += 1
#                     return answer
#                 else:
#                     bridge.rotate(-1)
                    
#         answer += 1



# 남의 풀이는 훨씬 간단하다..
# rotate 없어도 됨
# 원리는 같으나 훨씬 간단함..근데 얘도 1개 시간초과로 통과 못하네...????????????????
# from collections import deque
# def solution(bridge_length, weight, truck_weights):
#     time = 0
#     q = [0] * bridge_length
#     q = deque(q)
#     truck_weights = deque(truck_weights)
    
#     while q:
#         time += 1
#         q.popleft()
#         if truck_weights:
#             if sum(q) + truck_weights[0] <= weight:
#                 q.append(truck_weights.popleft())
#             else:
#                 q.append(0)
    
#     return time



# 시간초과를 해결한 풀이
# bridgeWeight가 사용됨 -> 이는 sum()연산을 하지 않기 위해서이다..입력이 아주 많은 경우 이 sum() 연산때문에 시간초과가 난다
from collections import deque
def solution(bridge_length, weight, truck_weights):
    time = 0
    bridgeWeight = 0 # 다리 위의 트럭 무게
    truck_weights = deque(truck_weights) # 대기 트럭 큐
    bridge = deque([0 for _ in range(bridge_length)]) # 다리 길이만큼 0으로 채운다.
    
    while len(truck_weights) or bridgeWeight > 0: # 대기 트럭이 있거나 이동 중인 트럭이 있는 동안 반복
        removedTruck = bridge.popleft() # 다리에서 하나 제거
        bridgeWeight -= removedTruck
        time += 1
        
        if len(truck_weights) and bridgeWeight + truck_weights[0] <= weight: # 새 트럭이 다리에 올라갈 수 있으면
            newTruck = truck_weights.popleft()
            bridgeWeight += newTruck
            
            bridge.append(newTruck) # 대기 트럭에서 하나 빼서 다리에 올림
            
        else: # 새 트럭이 다리에 올라갈 수 없으면
            bridge.append(0) # 오른쪽에 0을 삽입해서 다리 길이 유지
            
        
    return time
